// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package schema generated by go-bindata.// sources:
// schema.graphql
// type/order.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x3d\x0e\xc2\x30\x0c\x85\xf7\x48\xb9\x83\xd9\xd2\x2b\x64\x2d\x4b\x07\x84\x10\x62\x42\x0c\xa1\xb6\x68\x87\xb6\x21\x3f\x43\x85\xb8\x3b\x6a\xd2\x88\x10\x55\x4c\x89\x9f\xed\xef\xf9\xd9\xb6\xa3\x41\xc1\x8b\x33\x00\x80\xa7\x27\x33\x4b\x38\x2d\x4f\x54\x06\xef\x94\xeb\xa7\x51\xc2\x61\xfd\x45\xdd\xfa\xbb\x6d\x4d\xaf\x63\xef\x9c\x55\x9c\xbd\x39\xe3\xcc\xcd\x9a\x22\x28\xc1\x27\x83\x64\x44\x8f\x12\x9a\xfd\xae\x92\x70\x5c\xea\xac\x65\x45\x25\xe1\x1a\xd4\x5b\x0e\x49\xc6\x89\xd3\x1a\x52\x8e\xc2\x9c\x08\x8b\x2b\xaa\x19\xb5\x77\x05\xd8\x6b\xdc\x9c\xbd\x04\xbd\xdc\xf8\x7a\xe6\x81\x7e\xee\xaf\x83\x39\x8a\x8d\xfb\xeb\x4e\x8d\x0f\xc2\x7f\x09\xa3\x2d\x96\x41\x3f\x01\x00\x00\xff\xff\x4e\x01\x80\x22\x85\x01\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 389, mode: os.FileMode(438), modTime: time.Unix(1736889615, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _typeOrderGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8f\x31\x0a\x42\x31\x10\x44\xfb\x40\xee\x30\xb9\x46\x3a\xc1\x26\x95\x85\x78\x80\xc5\x2c\x92\xc2\x25\xe6\x4f\x8a\x4f\xf0\xee\xa2\xa9\x82\x96\x76\xbb\xaf\x78\x8f\xe1\x5e\x15\xa7\x96\xb5\x61\x78\x07\x00\x25\x47\xa4\x63\x98\x8f\xc9\x5d\x23\xce\x6c\xc5\x6e\x93\x5c\x9b\x0a\x35\x1f\xb8\xe2\x8d\xc2\xbe\xad\xec\xd1\xc5\x58\xb8\x47\x24\x63\xf0\xee\xe9\x9d\x77\xc5\x6a\xe7\x2c\xa6\xcf\x39\xfe\x5d\xfa\x0e\x5d\x6a\x16\xea\x92\x7b\xaf\x9c\x86\xf0\x5b\xf1\x0a\x00\x00\xff\xff\x00\xb6\x37\xae\x19\x01\x00\x00")

func typeOrderGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeOrderGraphql,
		"type/order.graphql",
	)
}

func typeOrderGraphql() (*asset, error) {
	bytes, err := typeOrderGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/order.graphql", size: 281, mode: os.FileMode(438), modTime: time.Unix(1736884621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql":     schemaGraphql,
	"type/order.graphql": typeOrderGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"order.graphql": &bintree{typeOrderGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
